// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8];
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9];
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6];
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5];
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6];

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5];
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3];
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4];
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5];
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4];

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4];
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9];
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3];
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3];
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3];

// An array of all the arrays above
const batch = [valid1, valid2, valid3, valid4, valid5, invalid1, invalid2, invalid3, invalid4, invalid5, mystery1, mystery2, mystery3, mystery4, mystery5];


// Add your functions below:

// 1 - 4
let validateCred = (arr) => {
    // creating variables
    let newArr = [];     
    let originalSum;
    // saving last element from the array
    let lastEle = arr[arr.length - 1];

    // assigning newArr array the elements from valid 1
    newArr = arr.slice();

    // popping last digit
    newArr.pop();
    
    // reversing array
    newArr.reverse(newArr);

    // multiplying odd elements in array by 2
    for (let i = 0; i < newArr.length; i++) {
        if (i % 2 === 0) {
            newArr[i] *= 2;
            // subtracting 9 from the odd that are over 9
            if (newArr[i] > 9) {
                newArr[i] = newArr[i] - 9;
            }
        }
    }

    // summing the working array and adding the last element from the popped original
    originalSum = (newArr.reduce((a, b) => a + b, 0)) + lastEle;

    // confirming valid or invalid
    if (originalSum % 10 === 0) {
        return "valid"; 
    } else {
        return "invalid";
    }
}

// 4
// finding invalid cards
let findInvalidCards = batchArr => {
    let invalidCards = [];

    for (let i = 0; i < batchArr.length; i++) {
        if (validateCred(batchArr[i]) === "invalid") {
            invalidCards.push(batchArr[i]);
        }
    }
    return invalidCards;
}

// 5
let idInvalidCardCompanies = (arr) => {
    let cCards = [];
    for (let i = 0; i < arr.length; i++) {
        // console.log(arr[i][0]);
        if (arr[i][0] === 3) {
            cCards.push('Amex')
        } else if (arr[i][0] === 4) {
            cCards.push('Visa')
        } else if (arr[i][0] === 5) {
            cCards.push('Mastercard')
        } else if (arr[i][0] === 6) {
            cCards.push('Discover')
        } else {
            cCards.push('Company not found');
        }
    }

    // removing duplicates
    let duplicates = [];
    cCards.forEach((strings) => {
        if(!duplicates.includes(strings)) {
            duplicates.push(strings);
        }
    });
    return duplicates;
}

let logger = idInvalidCardCompanies(findInvalidCards(batch));
console.log("The following companies supplied invalid cards: " + "\n" + logger.join(" "));

